
/* Include memory link script. It will be searched in -L paths. */
INCLUDE memory_map.ld

/*
 * The linking script will provide the following constants :
 *  - _start_rodata :   the start of the rodata region in FLASH. .rodata must be copied in RAM at init at @_start_data.
 *  - _end_rodata   :   the end of the rodata region in flasg;
 *  - _start_data   :   the start of the region where to copy rodata, in RAM;
 *  - _start_bss    :   the start of the bss region, to initialise with zeros;
 *  - _end_bss      :   the end of the bss region, to initialise with zeros;
 *  - _ram_lowest   :   the lowest bound of the ram's available zone;
 *  - _ram_highest  :   the highest bound of the ram's available zone;
 */

/*TODO : */



SECTIONS
{
	.text : {
		. = 0;
		KEEP(*(.vectors))
		*(.startup*)
		/* TODO: does linker detect startup overflow onto flashconfig? */
		. = 0x400;
		KEEP(*(.flashconfig*))
		*(.text*)
		*(.rodata*)
		*(.init)
		*(.fini)
	} > FLASH

	_etext = .;


	.data : AT (_etext) {
		. = ALIGN(4);
		_sdata = .;
		*(.fastrun*)
		*(.data*)
		. = ALIGN(4);
		_edata = .;
	} > RAM

	.bss : {
		. = ALIGN(4);
		_sbss = .;
		__bss_start__ = .;
		*(.bss*)
		*(COMMON)
		. = ALIGN(4);
		_ebss = .;
		__bss_end = .;
		__bss_end__ = .;
	} > RAM

	_ram_highest = ORIGIN(RAM) + LENGTH(RAM);
}