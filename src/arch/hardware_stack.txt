This file intents to describe as clearly as possible the way the kernel adapts to the hardware.

--- CHIP STRUCTURE ---

A microcontroller can be describes as the union of two elements :

    - The Microprocessor : It actually executes the code you compile. It is the base of the microcontroller, the first
        brick in the design;

        Its tasks are :
            - Code execution;
            - Interrupts handling;
            - (optionnal) memory protection;

        The processor may or may not provides some hardware to ease the kernel's job (ex : auto context switching);

        The processor provides support for interrupts handling. It provides a set of triggerable interrupts, that are
        used or not by the Peripherals;


    - Peripherals : a set of hardware peripherals (UARTS, Ethernet, Timers, etc...), built on top of the processor.

        Peripherals are built on top of the processor (ie : two chips can have the same model of microprocessor), and performs
        various tasks, independently of the processor;

        They share parts of the RAM with the processor. More precisely, they own a part of the RAM (a set of contiguous memory
        cases) that can be used to configure them, to know their sequences_initialised, or to get data from them.

        As their tasks are asynchronous in the processor's point of view (ex : the processor doesn't explicitly know when the
        UART will have sent its data), they can communicate directly with the processor through interrupts.

        Interrupts can be managed in a different way from one chip to another for the same type of peripheral. (ex :
        UARTS interrupts can be polled together, or separated); Peripheral libraries (see below) will have to implement
        their interrupts methods;

        A Peripheral will have a theoretical description, (ex : for UART, packet format, baudrate), that is common to
        all peripherals of this kind, and an implementation, that is specific to a chip (ex : UART config
        memory are different from one chip to another, but UART protocol doesn't differ);

        For all peripherals, peripheral libs have to be written, to allow drivers to communicate in a standardised way
        with all peripherals of a certain kind;


--- KERNEL STRUCTURE ---

As the kernel aims to be as hardware independent as possible, the hardware interaction is not hardcoded.
It obviously depends on the hardware you comile the code on.

The kernel is built on top of the processor. It required a minimum of hardware (ex : a systick timer), to perform its basic
tasks, that are :
    - Threads initialisations;
    - The context switching;
    - The systick configuration;
    - Interrupts configurations;


To interact with peripherals, the software uses drivers, specific to the peripheral they support.

Drivers provides high level functions (configuration, interaction) to use peripherals, and as said behind, communicate
with peripheral libraries, that are specific to the chip we deploy on;

Drivers are not specific to a chip, the hardware abstraction being provided by peripheral libraries.

