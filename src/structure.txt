

Level 0 : Core;
    - architecture lib (ex : armv7)
    - processor lib (ex : cortex m4f)
    - chip lib (ex : mk64fx512)
    - board lib (ex : teensy35)
    - system drivers (ex k64 SIM)

The core's objective is to start and configure the micro-controller properly for code execution;
System drivers are required to configure the chip for proper code execution
This level is offered to all other levels for linking and including;
It is the base programming environment available;

When its job is done, it calls __program_start, that must be implemented in level 1;



Level 1 : Kernel;
    - offers a hardware abstraction.
    - manages processes scheduling and execution;
    - references networking interfaces;
    - references shared resources;

The kernel implements __program_start, its entry function.
It calls __create_drivers, the standard driver creation function;

In case where the kernel shouldn't be included (for debug purposes), another library will be compiled, implementing
a dummy __kernel_init;

The kernel contains two set of files, KERNEL_PUB and KERNEL_PRIV. KERNEL_PUB contains sources that can be accessed by
other libraries (std drivers, processes). KERNEL_PRIV contains kernel internal libraries;



Level 2 : Standard Drivers;
    - Generic drivers, offering optional hardware capabilities;

Standard drivers offer an interface to common peripherals.
The library contains the function __create_drivers, that is called by the kernel;
In this function, all drivers are created with appropriate parameters, and registered to the kernel;


Level 4 : Modules;