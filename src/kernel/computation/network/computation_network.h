//
// Created by root on 7/8/18.
//

#ifndef TRACER_COMPUTATION_NETWORK_H
#define TRACER_COMPUTATION_NETWORK_H

#include "data_structures/containers/llist.h"

#include "kernel/computation/data_host.h"

#include "computation_network.h"


//-------------------------------------------------- Computation node --------------------------------------------------



/*
 * A computation node comprises :
 * 	- A data host, that hosts the function's input data;
 * 	- A function, that can be called when the data host has initialised data;
 */

typedef struct {

	//Computation nodes are stored in linked lists;
	linked_element_t link;

	//The node's priority
	size_t priority;

	//Data mutex;
	mutex_t *data_mutex;

	//The node's data host;
	dhost_t input_host;

	//The function, to call when the host has initialised data;
	bool (*const function )(void *activation_data, void *input_data);//TODO process_model_t;

	//The array of output nodes;
	const size_t *const output_references;

} cnode_t;


/*
 * When nodes need to activate each other, they will declare their args, and call the network, providing the following
 * 	data structure (generated by the network) and an index referencing the required node to activate;
 */

typedef struct {

	//The network the node's part of;
	struct cnetwork_t *const cnetwork;

	//The node's neighbors;
	const size_t *const nodes_references;

} node_activation_t;


//------------------------------------------------ Computation network -------------------------------------------------

typedef struct cnetwork_t {

	//The mutex to protect the active nodes linked list;
	mutex_t *list_mutex;//TODO;

	//The active nodes list;
	linked_list_t active_nodes;

	//The array of nodes;
	cnode_t *nodes;

} cnetwork_t;


//Execute an available node; Concurrency supported;
bool cnetwork_execute(cnetwork_t *cnetwork);

//Activate a node providing args; Concurrency supported;
void cnetwork_activate(const void *activator, size_t neighbor_id, const void *args, size_t args_size);

#endif //TRACER_COMPUTATION_NETWORK_H
